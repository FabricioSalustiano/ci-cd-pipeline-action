name: CI-CD Homologation

on:
  pull_request:
    types: [opened, synchronize, edited, labeled]
  pull_request_review:
    types: [submitted]

jobs:
  check-homolog:
    runs-on: ubuntu-latest
    outputs:
      homolog: ${{ steps.set-homolog.outputs.homolog }}
    steps:
      - name: Verificar número de aprovações
        id: set-homolog
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const prNumber = context.payload.pull_request.number;
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });
            const approvers = new Set(
              reviews.filter(r => r.state === 'APPROVED')
                     .map(r => r.user.login)
            );
            core.info(`Aprovadores: ${Array.from(approvers).join(', ')}`);
            core.info(approvers.size >= 2 ? 'true' : 'false');
            return approvers.size >= 2 ? 'true' : 'false';

  detect-changes:
    needs: check-homolog
    if: ${{ needs.check-homolog.outputs.homolog == 'true' }}
    runs-on: ubuntu-latest
    outputs:
      run-client: ${{ steps.check.outputs.run_client }}
      run-api: ${{ steps.check.outputs.run_api }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}

      - name: Buscar master
        run: git fetch origin master

      - name: Detectar mudanças
        id: check
        run: |
          CHANGED_FILES=$(git diff --name-only origin/master...${GITHUB_HEAD_REF})
          echo "Arquivos alterados:"
          echo "$CHANGED_FILES"

          set_output() {
            local name=$1
            local pattern=$2
            if echo "$CHANGED_FILES" | grep -qE "$pattern"; then
              echo "$name=true" >> $GITHUB_OUTPUT
            else
              echo "$name=false" >> $GITHUB_OUTPUT
            fi
          }

          set_output "run-client" "^packages/apps/client/"
          set_output "run-api" "^packages/apps/api/"

  validate-client:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.run-client == 'true' }}
    uses: ./.github/workflows/ci-cd.client.yml

  validate-api:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.run-api == 'true' }}
    uses: ./.github/workflows/ci-cd.api.yml

  publish-homolog:
    needs: [validate-client, validate-api, check-homolog]
    if: ${{ needs.check-homolog.outputs.homolog == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configurar Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Atualizar master e branch da PR
        run: |
          git fetch origin
          git checkout ${{ github.head_ref }}
          git rebase origin/master

      - name: Push branch PR rebaseada
        run: |
          git push origin ${{ github.head_ref }} --force-with-lease

      - name: Publicar em homolog com cherry-pick
        run: |
          git checkout master
          git pull origin master
          git branch -D homolog || true
          git checkout -b homolog
          git cherry-pick origin/master..origin/${{ github.head_ref }}
          git push origin homolog -f
